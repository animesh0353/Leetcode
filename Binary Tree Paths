/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 	/**
	 * Function to generate root to leaves path and return list
	 * @param root starting TreeNode
	 * @return  return all root to leaves path
	 */
	 
	 
public class Solution {
    public List<String> binaryTreePaths(TreeNode root) 
    {
        List<String> list = new LinkedList<String>();
        if(root == null)
        	return list;
        if(root.left == null && root.right == null)
        {
        	list.add(String.valueOf(root.val));
        	return list;
        }
        if(root.left != null)
        	rootToLeaves(root.left, String.valueOf(root.val), list);
        if(root.right != null)
        	rootToLeaves(root.right, String.valueOf(root.val), list);
        return list;
    }
    
    void rootToLeaves(TreeNode root, String string, List<String> list)
    {
    	if(root.left == null && root.right == null)
    	{
    		list.add(string+"->"+String.valueOf(root.val));
    	}
    	else
    	{
    		string = string+"->"+String.valueOf(root.val);
    		if(root.left != null)
    			rootToLeaves(root.left, string, list);
    		if(root.right != null)
    			rootToLeaves(root.right, string, list);
    	}
    }
}
