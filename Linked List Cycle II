/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head == null || head.next == null )
            return null;
        ListNode slow = head;
        ListNode fast = head;
        boolean bool = false;
        while(fast!=null && fast.next!=null)
        {
            slow = slow.next;
            fast = fast.next.next;
            if(fast == slow)
                break;
        }
        if(fast==null || fast.next==null)
            return null;
            
        int k =1;
        while(fast.next!=slow)
        {
            k++;
            fast = fast.next;
        }
        fast = head;
        while(k>0)
        {
            k--;
            fast = fast.next;
        }
        slow = head;
        while(fast!=slow)
        {
            slow = slow.next;
            fast = fast.next;
        }
        return fast;
    }
}
