/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
	public static class NodeLabel
	{
		TreeNode node;
		int label;
		public NodeLabel(TreeNode node, int label) {
			// TODO Auto-generated constructor stub
			this.node = node;
			this.label = label;
		}
	}
    public List<List<Integer>> levelOrder(TreeNode root)
    {
    	List<List<Integer>> list = new ArrayList<List<Integer>>();
        if(root == null)
        	return list;
        Queue<NodeLabel> queue = new LinkedList<NodeLabel>();
        queue.add(new NodeLabel(root, 0));
        while(!queue.isEmpty())
        {
        	List<Integer> list2;
        	NodeLabel nodeLabel = queue.remove();
        	if(list.size() > nodeLabel.label)
        		list2 = list.get(nodeLabel.label);
        	else
        	{
        		list2 = new ArrayList<Integer>();
        		list.add(list2);
        	}
        	list2.add(nodeLabel.node.val);
        	TreeNode node = nodeLabel.node;
        	if(node.left!=null)
        		queue.add(new NodeLabel(node.left, 1+nodeLabel.label));
        	if(node.right!=null)
        		queue.add(new NodeLabel(node.right, 1+nodeLabel.label));
        }
        return list;
    }
}
