// Write a function to find the longest common prefix string amongst an array of strings. 

public class Solution {
    public class TrieNode
	{
		boolean leaf;
		Map<Character, TrieNode> map;
		public TrieNode() {
			// TODO Auto-generated constructor stub
			leaf = false;
			map = new HashMap<Character, TrieNode>();
		}
	}
	
	public class Trie
	{
		TrieNode root;
		int count;
		public Trie() {
			// TODO Auto-generated constructor stub
			root = new TrieNode();
		}
		
		public void addWord(String string) 
		{
			char[] ch = string.toCharArray();
			TrieNode trieNode = root;
			for (int i = 0; i < ch.length; i++) {
				if(trieNode.map.containsKey(ch[i]))
					trieNode = trieNode.map.get(ch[i]);
				else
				{
					TrieNode temp = new TrieNode();
					trieNode.map.put(ch[i], temp);
					trieNode = trieNode.map.get(ch[i]);
				}
				if(i == ch.length-1)
					trieNode.leaf = true;
			}
		}

		public String prefix()
		{
			StringBuffer strBuff = new StringBuffer();
			TrieNode trieNode = root;
			while(trieNode.map.size()==1)
			{
			    if(trieNode.leaf)
					break;
				ArrayList<Map.Entry<Character, TrieNode>> list = new ArrayList<Map.Entry<Character, TrieNode>>(trieNode.map.entrySet());
				strBuff.append(list.get(0).getKey());
				trieNode = list.get(0).getValue();
			}
			return strBuff.toString();
		}
	}
	

	public String longestCommonPrefix(String[] strs)
	{
		Trie trie = new Trie();
		for(String string : strs)
		    if(string.length()==0)
		        return "";
			else
			    trie.addWord(string);
		return trie.prefix().toString();
	}
}
