/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {
	Stack<TreeNode> stk = new Stack<TreeNode>();
    public BSTIterator(TreeNode root) 
    {
    	TreeNode temp = root;
    	while(temp != null)
    	{
    		stk.push(temp);
    		temp = temp.left;
    	}
    }

	/** @return whether we have a next smallest number */
    public boolean hasNext() {
        return !stk.isEmpty();
    }

    /** @return the next smallest number */
    public int next() {
    	int val = 0;
    	try
    	{
			TreeNode temp = stk.pop();
			val = temp.val;
			temp = temp.right;
			while(temp!=null)
			{
				stk.push(temp);
				temp = temp.left;
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
    	return val;
    }
   
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */
