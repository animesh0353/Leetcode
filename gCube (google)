//    Googlers are very interested in cubes, but they are bored with normal three-dimensional cubes and also want to think about other kinds of cubes! A "D-dimensional cube" has D dimensions, all of equal length. (D may be any positive integer; for example, a 1-dimensional cube is a line segment, and a 2-dimensional cube is a square, and a 4-dimensional cube is a hypercube.) A "D-dimensional cuboid" has D dimensions, but they might not all have the same lengths.
//    Suppose we have an N-dimensional cuboid. The N dimensions are numbered in order (0, 1, 2, ..., N - 1), and each dimension has a certain length. We want to solve many subproblems of this type:
//    1. Take all consecutive dimensions between the Li-th dimension and Ri-th dimension, inclusive.
//    2. Use those dimensions to form a D-dimensional cuboid, where D = Ri - Li + 1. (For example, if Li = 3 and Ri = 6, we would form a 4-dimensional cuboid using the 3rd, 4th, 5th, and 6th dimensions of our N-dimensional cuboid.)
//    3. Reshape it into a D-dimensional cube that has exactly the same volume as that D-dimensional cuboid, and find the edge length of that cube.
//    Each test case will have M subproblems like this, all of which use the same original N-dimensional cuboid.
//
//    Input
//    The first line of the input gives the number of test cases, T. T test cases follow.
//    Each test case begins with two integers N and M; N is the number of dimensions and M is the number of queries. Then there is one line with N positive integers ai, which are the lengths of the dimensions, in order. Then, M lines follow. In the ith line, there are two integers Li and Ri, which give the range of dimensions to use for the ith subproblem.
//
//    Output
//    For each test case, output one line containing "Case #x:", where x is the test case number (starting from 1). After that, output M lines, where the ith line has the edge length for the ith subproblem. An edge length will be considered correct if it is within an absolute error of 10-6 of the correct answer. See the FAQ for an explanation of what that means, and what formats of real numbers we accept.
//
//    Limits
//
//    1 ≤ T ≤ 100.
//    1 ≤ ai ≤ 109. 
//    0 ≤ Li ≤ Ri < N.
//
//    Small dataset
//
//    1 ≤ N ≤ 10.
//    1 ≤ M ≤ 10.
//    Large dataset
//
//    1 ≤ N ≤ 1000.
//    1 ≤ M ≤ 100.
//    Sample
//
//    Input 
//    2
//    2 2
//    1 4
//    0 0
//    0 1
//    3 2
//    1 2 3
//    0 1
//    1 2
//
//    Output 
//    Case #1:
//    1.000000000
//    2.000000000
//    Case #2:
//    1.414213562
//    2.449489743
 

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.InputMismatchException;
import java.util.Random;

import javax.naming.spi.DirStateFactory.Result;

public class Solution {
	InputStream is;
	PrintWriter out;
	String INPUT = "";
	
	void solve()
	{
		int T = ni();
		for (int i = 1; i <= T; i++) 
		{
			int n = ni();
			int m = ni();
			int[] arr = na(n);
			out.printf("Case #%d: \n",i);
			for (int j = 0; j < m; j++) 
			{
				int left = ni();
				int right = ni();
				int len = right - left +1;
				double result = 1.0;
				double root = 1.0/len;
				for (int l = left; l <= right; l++) 
				{
					result *= fastModular(arr[l], root);
				}
//				result = Math.pow(result, root);
				out.println(result);
			}
			
			
			
			
			
		}
//		int m = ni();
//		int[] arr = na(m);
//		out.println(n+" "+m);
//		for(int ele : arr)
//			out.println(ele);
	}
	
	public double fastModular(double base, double exp)
	{
		double val = Math.pow(base, exp);
		return val;
	}

	
	void run() throws Exception
	{
		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
		out = new PrintWriter(System.out);
		
		long s = System.currentTimeMillis();
		solve();
		out.flush();
		if(!INPUT.isEmpty())tr(System.currentTimeMillis()-s+"ms");
	}
	
	public static void main(String[] args) throws Exception { new Solution().run(); }
	
	private byte[] inbuf = new byte[1024];
	private int lenbuf = 0, ptrbuf = 0;
	
	private int readByte()
	{
		if(lenbuf == -1)throw new InputMismatchException();
		if(ptrbuf >= lenbuf){
			ptrbuf = 0;
			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
			if(lenbuf <= 0)return -1;
		}
		return inbuf[ptrbuf++];
	}
	
	private boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
	private int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
	
	private double nd() { return Double.parseDouble(ns()); }
	private char nc() { return (char)skip(); }
	
	private String ns()
	{
		int b = skip();
		StringBuilder sb = new StringBuilder();
		while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')
			sb.appendCodePoint(b);
			b = readByte();
		}
		return sb.toString();
	}
	
	private char[] ns(int n)
	{
		char[] buf = new char[n];
		int b = skip(), p = 0;
		while(p < n && !(isSpaceChar(b))){
			buf[p++] = (char)b;
			b = readByte();
		}
		return n == p ? buf : Arrays.copyOf(buf, p);
	}
	
	private char[][] nm(int n, int m)
	{
		char[][] map = new char[n][];
		for(int i = 0;i < n;i++)map[i] = ns(m);
		return map;
	}
	
	private int[] na(int n)
	{
		int[] a = new int[n];
		for(int i = 0;i < n;i++)a[i] = ni();
		return a;
	}
	
	private int ni()
	{
		int num = 0, b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private long nl()
	{
		long num = 0;
		int b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private static void tr(Object... o) { System.out.println(Arrays.deepToString(o)); }
}
