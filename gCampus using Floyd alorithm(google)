/** Google problem round A APAC 2016
  * 

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.InputMismatchException;
import java.util.Random;


public class Solution {
	InputStream is;
	PrintWriter out;
	String INPUT = "";
	
	void solve()
	{
		int T = ni();
		for (int i = 1; i <= T; i++) 
		{
			int n = ni();
			int m = ni();
			int[][] graph = new int[n][n];
			for (int j = 0; j < n; j++) {
				for (int j2 = 0; j2 < n; j2++) 
				{
					if(j == j2)
						graph[j][j2] = 0;
					else
						graph[j][j2] = 1000000;
				}
			}
			int[] first = new int[m];
			int[] second = new int[m];
			int[] costBet = new int[m];
			out.printf("Case #%d: \n",i);
			for (int j = 0; j < m; j++) 
			{
				// populate the matrix as given in distance between two nodes in bidirectional graph
				int src = ni();
				int dest = ni();
				int cost = ni();
				if(graph[src][dest] > cost)
				{
					graph[src][dest] = cost;
					graph[dest][src] = cost;
				}
				first[j] = src;
				second[j] = dest;
				costBet[j] = cost;
				
			}
//			 {0,   5,  INF, 10},
//             {INF, 0,   3, INF},
//             {INF, INF, 0,   1},
//             {INF, INF, INF, 0}
			
			

// Print the solution
			int[][] dist = floydWarshell(graph, n);
			for (int j = 0; j < m; j++) {
				int s = first[j];
				int d = second[j];
				if(dist[s][d] < costBet[j])
					out.print(j+"\n");
			}
			
		}
//		int m = ni();
//		int[] arr = na(m);
//		out.println(n+" "+m);
//		for(int ele : arr)
//			out.println(ele);
	}
	
	int[][] floydWarshell (int graph[][], int V)
	{
	    /* dist[][] will be the output matrix that will finally have the shortest 
	      distances between every pair of vertices */
		int[][] dist = new int[V][V];
	    int i, j, k;
	 
	    /* Initialize the solution matrix same as input graph matrix. Or 
	       we can say the initial values of shortest distances are based
	       on shortest paths considering no intermediate vertex. */
	    for (i = 0; i < V; i++)
	        for (j = 0; j < V; j++)
	            dist[i][j] = graph[i][j];
	 
	    /* Add all vertices one by one to the set of intermediate vertices.
	      ---> Before start of a iteration, we have shortest distances between all
	      pairs of vertices such that the shortest distances consider only the
	      vertices in set {0, 1, 2, .. k-1} as intermediate vertices.
	      ----> After the end of a iteration, vertex no. k is added to the set of
	      intermediate vertices and the set becomes {0, 1, 2, .. k} */
	    for (k = 0; k < V; k++)
	    {
	        // Pick all vertices as source one by one
	        for (i = 0; i < V; i++)
	        {
	            // Pick all vertices as destination for the
	            // above picked source
	            for (j = 0; j < V; j++)
	            {
	                // If vertex k is on the shortest path from
	                // i to j, then update the value of dist[i][j]
	                if (dist[i][k] + dist[k][j] < dist[i][j])
	                    dist[i][j] = dist[i][k] + dist[k][j];
	            }
	        }
	    }
	 
	    // Print the shortest distance matrix
//	    printSolution(dist,V);
	    return dist;
	}
	/* A utility function to print solution */
	void printSolution(int dist[][], int V)
	{
	    out.printf ("Following matrix shows the shortest distances"+
	            " between every pair of vertices \n");
	    for (int i = 0; i < V; i++)
	    {
	        for (int j = 0; j < V; j++)
	        {
	            if (dist[i][j] == Integer.MAX_VALUE)
	                out.printf("%7s", "INF");
	            else
	                out.printf ("%7d", dist[i][j]);
	        }
	        out.printf("\n");
	    }
	    
	}
	
	void run() throws Exception
	{
		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
		out = new PrintWriter(System.out);
		
		long s = System.currentTimeMillis();
		solve();
		out.flush();
		if(!INPUT.isEmpty())tr(System.currentTimeMillis()-s+"ms");
	}
	
	public static void main(String[] args) throws Exception { new Solution().run(); }
	
	private byte[] inbuf = new byte[1024];
	private int lenbuf = 0, ptrbuf = 0;
	
	private int readByte()
	{
		if(lenbuf == -1)throw new InputMismatchException();
		if(ptrbuf >= lenbuf){
			ptrbuf = 0;
			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
			if(lenbuf <= 0)return -1;
		}
		return inbuf[ptrbuf++];
	}
	
	private boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
	private int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
	
	private double nd() { return Double.parseDouble(ns()); }
	private char nc() { return (char)skip(); }
	
	private String ns()
	{
		int b = skip();
		StringBuilder sb = new StringBuilder();
		while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')
			sb.appendCodePoint(b);
			b = readByte();
		}
		return sb.toString();
	}
	
	private char[] ns(int n)
	{
		char[] buf = new char[n];
		int b = skip(), p = 0;
		while(p < n && !(isSpaceChar(b))){
			buf[p++] = (char)b;
			b = readByte();
		}
		return n == p ? buf : Arrays.copyOf(buf, p);
	}
	
	private char[][] nm(int n, int m)
	{
		char[][] map = new char[n][];
		for(int i = 0;i < n;i++)map[i] = ns(m);
		return map;
	}
	
	private int[] na(int n)
	{
		int[] a = new int[n];
		for(int i = 0;i < n;i++)a[i] = ni();
		return a;
	}
	
	private int ni()
	{
		int num = 0, b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private long nl()
	{
		long num = 0;
		int b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private static void tr(Object... o) { System.out.println(Arrays.deepToString(o)); }
}
